# This is a simple script to scan for software vulnerabilities on a Windows 11 Machine.
# It will scan for vulnerabilities on the machine and return a list of software, software version,vulnerabilities, severity, and CVE citation.

# This script will use the following API:
# https://nvd.nist.gov/developers/request-an-api-key

# Software Vulnerability Scanner for Windows 11
# Uses NVD API for comprehensive vulnerability data

# Configuration
$apiKey = (Get-Content -Path "configVuln.json" | ConvertFrom-Json).NVDAPIKey    
$nvdApiBase = "https://services.nvd.nist.gov/rest/json/cves/2.0"

# Function to get installed software
function Get-InstalledSoftware {
    # Get the raw winget output
    $wingetOutput = winget list | Out-String
    
    # Convert the output to an array of lines and clean it up
    $lines = $wingetOutput -split "`n" | Where-Object { $_ -match '\S' }
    
    # Find the header line (contains "Name" and "Version")
    $headerIndex = $lines | Select-Object -First 5 | 
        Where-Object { $_ -match 'Name.*Version' } |
        ForEach-Object { $lines.IndexOf($_) }
    
    # Get the separator line to determine column positions
    $separator = $lines[$headerIndex + 1]
    
    # Create regex pattern based on separator line
    $columnBreaks = @()
    $separator.ToCharArray() | ForEach-Object -Begin { $i = 0 } -Process {
        if ($_ -eq '-' -and $separator[$i-1] -ne '-') {
            $columnBreaks += $i
        }
        $i++
    }
    $columnBreaks += $separator.Length
    
    # Process each line after the separator
    $results = for ($i = $headerIndex + 2; $i -lt $lines.Count; $i++) {
        $line = $lines[$i]
        if ($line -match '^\s*$') { continue }
        
        $name = $line.Substring($columnBreaks[0], $columnBreaks[1] - $columnBreaks[0]).Trim()
        $id = $line.Substring($columnBreaks[1], $columnBreaks[2] - $columnBreaks[1]).Trim()
        $version = $line.Substring($columnBreaks[2], $columnBreaks[3] - $columnBreaks[2]).Trim()
        
        [PSCustomObject]@{
            Name = $name
            ID = $id
            Version = $version
            InstallDate = (Get-Item (Get-Command ($name -replace '\s.*$','')).Source -ErrorAction SilentlyContinue).CreationTime
        }
    }
    
    # Format and display the results
    $results | Format-Table -AutoSize -Property @(
        @{Label="Software Name"; Expression={$_.Name}},
        @{Label="Version"; Expression={$_.Version}},
        @{Label="Install Date"; Expression={
            if ($_.InstallDate) {
                $_.InstallDate.ToString("yyyy-MM-dd")
            } else {
                "Unknown"
            }
        }}
    )
    
    return $results
}

# Function to query NVD API
function Get-VulnerabilityData {
    param (
        [string]$software,
        [string]$version
    )
    
    $uri = "$nvdApiBase?keywordSearch=$software&apiKey=$apiKey"
    
    try {
        $response = Invoke-RestMethod -Uri $uri -Method Get
        return $response.vulnerabilities | Where-Object {
            $_.cve.descriptions.value -like "*$software*"
        }
    }
    catch {
        Write-Warning "Error querying NVD API: $_"
        return $null
    }
}

write-host "Scanning for installed software..."
$installedSoftware = Get-InstalledSoftware
write-host "`nScanning for vulnerabilities..."

foreach ($software in $installedSoftware) {
    $vulnerabilityData = Get-VulnerabilityData -software $software.Name -version $software.Version
    if ($vulnerabilityData) {
        Write-Host "`nFound vulnerabilities for $($software.Name):"
        $vulnerabilityData | Select-Object -Property Name, Version, Vulnerability, Severity, CVE | Format-Table -AutoSize
    }
}

write-host "`nScan complete."

write-host "Thank you for using the Software Vulnerability Scanner. Have a great day!"  
